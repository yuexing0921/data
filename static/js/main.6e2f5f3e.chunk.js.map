{"version":3,"sources":["chart/composite-line.jsx","chart/compositePercentage-line.jsx","chart/trading-line.jsx","chart/tradingPercentage-column.jsx","App.js","serviceWorker.js","index.js"],"names":["Page","data","list","map","arr","year","value","Number","config","title","visible","text","description","forceFit","padding","xField","yField","point","length","smooth","reverse","RangePicker","DatePicker","RadioGroup","Radio","Group","listData","label","require","filter","min","max","originData","minTime","Date","getTime","maxTime","k","App","useState","date","setDate","index","setIndex","useMemo","find","console","log","className","options","onChange","evt","target","dateString","format","defaultValue","moment","Boolean","window","location","hostname","match","locale","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6e2f5f3e.chunk.js","sourcesContent":["import React from 'react';\nimport { Line as Chart } from '@ant-design/charts';\nconst Page: React.FC = ({data}) => {\n  const list = data.list.map(arr => {\n    return {\n      year: arr[0],\n      value: Number(arr[7])\n    }\n  }) \n  const config = {\n    title: {\n      visible: true,\n      text: data.text,\n    },\n    description: {\n      visible: true,\n      text: '涨跌额',\n    },\n    forceFit: true,\n    padding: 'auto',\n    data: list,\n    xField: 'year',\n    yField: 'value',\n    point: {\n      visible: true,\n    }\n  };\n  return <Chart {...config} />;\n};\nexport default Page;","import React from 'react';\nimport { Line as Chart } from '@ant-design/charts';\nconst Page: React.FC = ({data}) => {\n  const list = data.list.map(arr => {\n    return {\n      year: arr[0],\n      value: Number(arr[9])\n    }\n  }) \n\n  const config = {\n    title: {\n      visible: true,\n      text: data.text,\n    },\n    description: {\n      visible: true,\n      text: '涨跌幅%',\n    },\n    forceFit: true,\n    padding: 'auto',\n    data: list,\n    xField: 'year',\n    yField: 'value',\n    point: {\n      visible: true,\n    }\n  };\n  return <Chart {...config} />;\n};\nexport default Page;","import React from 'react';\nimport { Line as Chart } from '@ant-design/charts';\n\nconst Page: React.FC = ({data}) => {\n  \n  const list = data.list.map(arr => {\n    return {\n      year: arr[0],\n      value: Number(arr[arr.length-3])\n    }\n  })\n  const config = {\n    title: {\n      visible: true,\n      text: '每天交易对比',\n    },\n    description: {\n      visible: true,\n      text: '每天交易总额',\n    },\n    padding: 'auto',\n    forceFit: true,\n    data: list,\n    xField: 'year',\n    yField: 'value',\n    smooth: true,\n    point: {\n      visible: true,\n    }\n  };\n  return <Chart {...config} />;\n};\nexport default Page;","import React from 'react';\nimport { Column as Chart } from '@ant-design/charts';\n\nconst Page: React.FC = ({data}) => {\n   const list = data.list.map(arr => {\n    return {\n      year: arr[0],\n      value: Number(arr[arr.length-1])\n    }\n  }).reverse() \n  const config = {\n    title: {\n      visible: true,\n      text: '每天交易对比-柱状图',\n    },\n    description: {\n      visible: true,\n      text: '成交金额差额的百分比',\n    },\n    padding: 'auto',\n    forceFit: true,\n    data: list,\n    xField: 'year',\n    yField: 'value',\n    smooth: true\n  };\n  return <Chart {...config} />;\n};\nexport default Page;","import React, { useState ,useMemo} from 'react';\nimport { DatePicker,Radio } from 'antd';\nimport moment from 'moment';\n\nimport Composite from \"./chart/composite-line\"\nimport CompositePercentage from \"./chart/compositePercentage-line\"\nimport Trading from \"./chart/trading-line\"\nimport TradingPercentage from \"./chart/tradingPercentage-column\"\n\nimport './App.css';\n\nconst { RangePicker } = DatePicker;\nconst dateFormat = 'YYYY-MM-DD';\nconst minDate = \"2020-01-01\";\nconst RadioGroup = Radio.Group\n\n\nconst listData = [{\n  value: \"000001\",\n  label: \"上证指数\",\n  data: require(\"./000001.json\")\n},{\n  value: \"399001\",\n  label: \"深圳指数\",\n  data: require(\"./399001.json\")\n},{\n  value: \"399300\",\n  label: \"沪深300\",\n  data: require(\"./399300.json\")\n},{\n  value: \"399006\",\n  label: \"创业板指数\",\n  data: require(\"./399006.json\")\n}]\n\nfunction filter(min, max, originData){\n\n  const minTime = new Date(min).getTime();\n  const maxTime = max ? new Date(max).getTime() : new Date().getTime();\n  return originData.filter(k => new Date(k[0]).getTime() > minTime && new Date(k[0]).getTime()< maxTime)\n}\nfunction App() {\n \n  const [date, setDate] = useState([minDate,'']);\n  const [index,setIndex] = useState(\"000001\")\n\n  const data = useMemo(()=>{\n    const list = listData.find(k => k.value === index)\n    return  {\n      list: filter(date[0],date[1], list.data),\n      text: list.label\n    }\n  },[date,index])\n \n\n  function onChangeDate(date, dateString) {\n    setDate(dateString)\n  }\n\n  function onChangeIndex(evt) {\n    setIndex(evt.target.value)\n  }\n  \n  function renderChart(){\n    return <>\n        <Composite data={data} />\n        <CompositePercentage data={data} />\n        <Trading data={data} />\n        <TradingPercentage data={data} />\n    </>\n  }\n  console.log(index)\n  return (\n    <div className=\"App\">\n      <div className=\"selected-pick\">\n        <RadioGroup options={listData} onChange={onChangeIndex} value={index}/>\n        <RangePicker onChange={onChangeDate} format={dateFormat} defaultValue={[moment(minDate, dateFormat), moment(new Date(), dateFormat)]}/>\n      </div>\n      \n      <br />\n      {renderChart() }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// 由于 antd 组件的默认文案是英文，所以需要修改为中文\n//\nimport zhCN from 'antd/es/locale/zh_CN';\nimport moment from 'moment';\nimport 'moment/locale/zh-cn';\nimport 'antd/dist/antd.css';\nimport './index.css';\n\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nmoment.locale('zh-cn');\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}